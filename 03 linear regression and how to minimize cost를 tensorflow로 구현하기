import tensorflow as tf
import numpy as np

tf.enable_eager_execution()
tf.__version__
import numpy as np

X = np.array([1, 2, 3]) # X의 numpy배열
Y = np.array([1, 2, 3]) # Y의 numpy 배열

def cost_func(W, X, Y): #cost함수
    c = 0
    for i in range(len(X)):
        c += (W * X[i] - Y[i]) ** 2
    return c / len(X) # 반복 후 X의 길이

for feed_W in np.linspace(-3, 5, num=15):
    curr_cost = cost_func(feed_W, X, Y)
    print("{:6.3f} | {:10.5f}".format(feed_W, curr_cost))
X = np.array([1, 2, 3]) # X에 1,2,3 부여
Y = np.array([1, 2, 3]) # Y에 1,2,3 부여

def cost_func(W, X, Y): #cost함수 정의
  hypothesis = X * W
  return tf.reduce_mean(tf.square(hypothesis - Y)) #square=제곱

W_values = np.linspace(-3, 5, num=15)
cost_values = []

for feed_W in W_values:
    curr_cost = cost_func(feed_W, X, Y)
    cost_values.append(curr_cost) # 값 추가
    print("{:6.3f} | {:10.5f}".format(feed_W, curr_cost))
import matplotlib.pyplot as plt
plt.rcParams["figure.figsize"] = (8,6)
import matplotlib.pyplot as plt

plt.plot(W_values, cost_values, "b")
plt.ylabel('Cost(W)')
plt.xlabel('W')
plt.show()
tf.set_random_seed(0)  # for reproducibility
x_data = [1., 2., 3., 4.]
y_data = [1., 3., 5., 7.]

W = tf.Variable(tf.random_normal([1], -100., 100.))

for step in range(300):
    hypothesis = W * X
    cost = tf.reduce_mean(tf.square(hypothesis - Y)) # 감소값 평균

    alpha = 0.01 
    gradient = tf.reduce_mean(tf.multiply(tf.multiply(W, X) - Y, X))
    descent = W - tf.multiply(alpha, gradient)
    W.assign(descent)

    if step % 10 == 0:
        print('{:5} | {:10.4f} | {:10.6f}'.format(
            step, cost.numpy(), W.numpy()[0]))
print(5.0 * W)
print(2.5 * W)
x_data = [1., 2., 3., 4.]
y_data = [1., 3., 5., 7.]

W = tf.Variable([5.0])

for step in range(300):
    hypothesis = W * X
    cost = tf.reduce_mean(tf.square(hypothesis - Y))

    alpha = 0.01
    gradient = tf.reduce_mean(tf.multiply(tf.multiply(W, X) - Y, X))
    descent = W - tf.multiply(alpha, gradient)
    W.assign(descent)

    if step % 10 == 0:
        print('{:5} | {:10.4f} | {:10.6f}'.format(
            step, cost.numpy(), W.numpy()[0]))
